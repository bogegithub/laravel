知识点:
1:array_reduce() 用回调函数迭代地将数组简化为单一的值 
例子:
function sum($carry, $item)
{
    $carry += $item;
    return $carry;
}
$a = array(1,2,3,4,5);
var_dump(array_reduce($a, "sum")); // int(15)
var_dump(array_reduce($a, "sum",5)); // int(20)
2:array_user_func() 和 array_user_func_array()
第一个把第一个参数作为回调函数调用
第二个调用回调函数，并把一个数组参数作为回调函数的参数
namespace Foobar;

class Foo {
    static public function test() {
        print "Hello world!\n";
    }
}

call_user_func(__NAMESPACE__ .'\Foo::test'); // As of PHP 5.3.0
call_user_func(array(__NAMESPACE__ .'\Foo', 'test')); // As of PHP 5.3.0


反射机制:
1:$concrete参数是类
$reflector = new ReflectionClass($concrete);
2:检查类是否可实例化
if (!$reflector->isInstantiable()) {
    return $this->notInstantiable($concrete);
}
$this->buildStack[] = $concrete;
3:获取类的构造函数
$constructor = $reflector->getConstructor();
4:判断构造函数是否为空
if (is_null($constructor)) {
    array_pop($this->buildStack)
5:如果为空直接返回这个类的对象
    return new $concrete;
}
6:如果参数不为空 获取构造函数的参数
$dependencies = $constructor->getParameters();
7:解决依赖
$instances = $this->resolveDependencies(
    $dependencies
);
array_pop($this->buildStack);
8:从给出的参数创建一个新的类实例。
return $reflector->newInstanceArgs($instances);


